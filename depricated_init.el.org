* ToDo list
** First Start
** Python and RobotFramework
** Tools for search and project managment
** Features list
** Auto install dependencies
** Tolls for VCS managment
** Other languages
* Debug
#+begin_src emacs-lisp
  (setq debug-on-error t)
#+end_src
* Install and setup el-get
*** Setup MELPA repository
#+begin_src emacs-lisp
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+end_src
*** COMMENT Setup load path
#+begin_src emacs-lisp
  (defvar el-get-root)
  (set 'el-get-root (concat (file-name-as-directory user-emacs-directory) "el-get"))
  (add-to-list 'load-path (concat (file-name-as-directory el-get-root) "el-get"))
  (add-to-list 'load-path (file-name-as-directory el-get-root))
#+end_src
*** TODO Setup el-get reinstall hook (update elpa/melpa recipes)
*** Install el-get if needed
#+begin_src emacs-lisp
  (unless (require 'el-get nil t)
    (url-retrieve
     "https://raw.github.com/dimitri/el-get/master/el-get-install.el"
     (lambda (s)
       (end-of-buffer)
       (eval-print-last-sexp))))
  ;; TODO Need restart?
#+end_src
*** COMMENT Setup recipes path
#+begin_src emacs-lisp
  (defvar my-recipe-path)
  (setq my-recipe-path
	(file-name-as-directory (concat (file-name-as-directory user-emacs-directory)
					"el-get-user/recipes")))
  (add-to-list 'el-get-recipe-path my-recipe-path)
#+end_src
 
* Load packages and check system packages
** COMMENT Check external recipes
   #+begin_src emacs-lisp
     (defun check-recipe (recipe-name)
       "Check recipe with given name exists in recipe directory"
       (let ((target-path (concat my-recipe-path recipe-name ".rcp")))
	 (file-exists-p target-path)
	 )
       )
     (unless (seq-every-p #'check-recipe '(
					   ;; TODO
					   ))
       (error "Some external recipe not exist"))
   #+end_src

** Load packages
*** cyberpunk-theme
#+begin_src emacs-lisp
  (el-get-bundle cyberpunk-theme
    (add-to-list 'custom-theme-load-path (concat (file-name-as-directory el-get-root) "cyberpunk-theme"))
    (set 'custom-safe-themes t)
    (load-theme 'cyberpunk)
    )
#+end_src
*** helm
#+begin_src emacs-lisp
  (el-get-bundle helm
    (delq 'execute-extended-command 'helm-completing-read-handlers-alist)
    (delq 'find-file 'helm-completing-read-handlers-alist)

    (global-unset-key (kbd C-x c C-x C-f))
    (global-unset-key (kbd C-x c M-x))
    )
#+end_src
*** TODO projectile
*** TODO helm-projectile
*** TODO helm-tramp
*** TODO helm-descbinds
*** company-mode
#+begin_src emacs-lisp
  (el-get-bundle company-mode)
#+end_src
*** TODO company-flx
*** TODO company-quickhelp
*** TODO company-jedi
*** flycheck
#+begin_src emacs-lisp
  (el-get-bundle flycheck)
#+end_src
*** TODO treemacs
*** lsp-mode
#+begin_src emacs-lisp
  (el-get-bundle lsp-mode)
#+end_src
*** TODO lsp-ui
*** TODO lsp-treemacs
*** yaml-mode
#+begin_src emacs-lisp
  (el-get-bundle yamp-mode)
#+end_src
*** TODO markdown-mode
*** TODO robot-mode
*** TODO rust-mode
*** TODO go-mode
*** el-get 'sync
#+begin_src emacs-lisp
  (el-get 'sync)
#+end_src
** TODO Check system packages
*** TODO make
*** TODO python-virtualenv
*** TODO python-pipenv
*** TODO pyenv
*** TODO python-language-server (arch) / snap install pylsp (ubuntu)
*** TODO ripgrep
*** TODO fd (find alternative)
*** TODO rustc, rls, rust-analysis, rust-src
*** TODO gopls
*** TODO pip install robotframework --user
* Misc
** Disable startup screen
   #+begin_src emacs-lisp
     (set 'inhibit-startup-screen 1)
   #+end_src
** Disable useless bars
   #+begin_src emacs-lisp
     (scroll-bar-mode -1)
     (menu-bar-mode -1)
     (tool-bar-mode -1)
   #+end_src
** Setup time display
   #+begin_src emacs-lisp
     (set 'display-time-day-and-date t)
     (set 'display-time-24hr-format t)
     (set 'display-time-load-average-threshold 0.5)
     (display-time)
   #+end_src
** Disable extra files creation
   #+begin_src emacs-lisp
     (set 'auto-save-default nil)
     (set 'create-lockfiles nil)
     (set 'make-backup-files nil)
   #+end_src
** Disable sound
   #+begin_src emacs-lisp
     (set 'ring-bell-function 'ignore)
   #+end_src
** COMMENT Turn on describe binds
   #+begin_src emacs-lisp
     (helm-descbinds-mode)
   #+end_src
* Info mode
** Setup info directorys
#+begin_src emacs-lisp
(set 'Info-directory-list '("/home/timoha/.emacs.d/el-get/haskell-mode"
                            "/home/timoha/.emacs.d/el-get/el-get/"
                            "/usr/share/info/"
                            "/usr/share/info/emacs"))
#+end_src
* Dired
#+begin_src emacs-lisp
(set 'dired-listing-switches "-lah")
#+end_src
* Ediff
#+begin_src emacs-lisp
(set 'ediff-split-window-function 'split-window-horizontally)
#+end_src
* Emacs Lisp
#+begin_src emacs-lisp
  (defun my-elisp-settings ()
    (company-mode)
    (flycheck-mode)
    (lsp)
  )
  (add-hook
    'emacs-lisp-mode-hook
    'my-elisp-settings
  )
#+end_src
* Python
#+begin_src emacs-lisp
  (defun my-python-hook ()
    (let* ((virtualenv-dir-buffer-name (generate-new-buffer-name "virtualenv-dir"))
	   (saved-current-buffer-name (current-buffer))
	   (pipenv-ret-code (call-process "pipenv" nil virtualenv-dir-buffer-name nil "--venv")))
      (unless (and (equal pipenv-ret-code "1") (looking-at-p "No virtualenv has been created for this project(.*) yet!"))
	(set-buffer virtualenv-dir-buffer-name)
	(let ((begin-first-line (progn (beginning-of-buffer) (point)))
	      (end-first-line (progn (end-of-line) (point))))
	  (setq-local lsp-pylsp-plugins-jedi-environment
		      (buffer-substring-no-properties begin-first-line end-first-line)
		      )
	  )
	(set-buffer saved-current-buffer-name)
	)
      (kill-buffer virtualenv-dir-buffer-name)
      )

    (company-mode)
    (flycheck-mode)
    (lsp-deferred)
    )

  (add-hook 'python-mode-hook
	    #'my-python-hook
	    )
#+end_src
* TODO Robot
* TODO Rust
* TODO Go
* Setup startup hook
** Start terminal
#+begin_src emacs-lisp
  (defun my-startup-hook ()
    (term "/bin/bash")
    (rename-buffer "bash-shell")
    )
  (add-hook 'emacs-startup-hook
	    #'my-startup-hook)
#+end_src
