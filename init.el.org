* ToDo list
** First Start
** TODO Tools for search and project managment
** Auto install system dependencies
** Emacs packages as system packages
** elgot vs lsp-mode vs lsp-bridge
** Function and variables
** Python and RobotFramework
*** Поиск и настройка проекта
**** На каждый venv дошлжен быть собственный lsp-server
** Tolls for VCS managment
** Natural Language Spelling
** TODO Programming languages
*** Elisp
*** TODO Pyton
**** Recognise project
**** Setup environment
**** Start lsp server
*** Robotframework
*** Rust
** Debugging
*** realgud
** Modify startup terminal launch
* Variables
** COMMENT Debug
#+begin_src emacs-lisp
  (setq debug-on-error t)
#+end_src
* Functions
** COMMENT Convert nil value to empty string
#+begin_src emacs-lisp
  (defun string-nil-guard (input-string)
    "If value is nil, return \"\", else return argument \"input-string\""
    (if (eval input-string)
	(eval input-string)
      (eval ""))
    )
#+end_src
** TODO Function for check and install required system packages.
* Install use-package
** (require 'package)
#+begin_src emacs-lisp
  (require 'package)
#+end_src
** Setup MELPA repository
#+begin_src emacs-lisp
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
#+end_src
** COMMENT (package-initialize)
#+begin_src emacs-lisp
  (package-initialize)
#+end_src
** Install use-package
#+begin_src emacs-lisp
  (package-install 'use-package t)
  (require 'use-package)
#+end_src
* Features
** Misk
*** Disable startup screen
   #+begin_src emacs-lisp
     (set 'inhibit-startup-screen 1)
   #+end_src
*** Disable useless bars
   #+begin_src emacs-lisp
     (scroll-bar-mode -1)
     (menu-bar-mode -1)
     (tool-bar-mode -1)
   #+end_src
*** Setup time display
   #+begin_src emacs-lisp
     (set 'display-time-day-and-date t)
     (set 'display-time-24hr-format t)
     (set 'display-time-load-average-threshold 0.5)
     (display-time)
   #+end_src
*** Disable extra files creation
   #+begin_src emacs-lisp
     (set 'auto-save-default nil)
     (set 'create-lockfiles nil)
     (set 'make-backup-files nil)
   #+end_src
*** Disable sound
   #+begin_src emacs-lisp
     (set 'ring-bell-function 'ignore)
   #+end_src
** Info mode
*** Setup info directorys
#+begin_src emacs-lisp
  ;; Add additional directories to INFOPATH environment variables
  (let ((info-dir-list (seq-filter 'eval (parse-colon-path (getenv "INFOPATH")))))
    ;; (add-to-list 'info-dir-list (file-name-concat el-get-dir "el-get"))
    ;; Когда нибудь haskell-mode
    (add-to-list 'info-dir-list "" t)
    (setenv "INFOPATH" (mapconcat 'eval info-dir-list path-separator))
    )
#+end_src
** Dired
#+begin_src emacs-lisp
  (set 'dired-listing-switches "-lah")
#+end_src
** Ediff
#+begin_src emacs-lisp
  (set 'ediff-split-window-function 'split-window-horizontally)
#+end_src
** Color Theme
*** cyberpunk-theme
#+begin_src emacs-lisp
  (use-package cyberpunk-theme
	       :config (load-theme 'cyberpunk t nil)
	       :ensure t
	       )
#+end_src
** Helm
#+begin_src emacs-lisp
  ;; TODO require 'make' sytem package
  (use-package helm
    :config
    (helm-mode)
    (setq helm-completing-read-handlers-alist (remove '(execute-extended-command) helm-completing-read-handlers-alist))
    (setq helm-completing-read-handlers-alist (remove '(find-file) helm-completing-read-handlers-alist))
    (keymap-global-unset "C-x c C-x C-f")
    (keymap-global-unset "C-x c M-x")
    :ensure t
    )
#+end_src
** COMMENT Helm descbinds
#+begin_src emacs-lisp
  (use-package helm-descbinds
    :config (helm-descbinds-mode)
    :ensure t)
#+end_src
** TODO Helm search
** TODO Function for loading project related emacs-lisp code
#+begin_src emacs-lisp
  ;; TODO Function for loading project related emacs-lisp code
  ;; TODO define function
  ;; TODO Search temacs_project.el
  ;; TODO load temacs_projecct.el
#+end_src
** Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t)
#+end_src
** COMMENT Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t)
#+end_src
** COMMENT Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t)
#+end_src
** COMMENT lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
	       :ensure t)
#+end_src
** COMMENT Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    )
#+end_src
** COMMENT lsp-treemacs
#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :ensure t
  )
#+end_src
** TODO Setup eglot for robotframework
** TODO Git
** TODO Natural Language Spelling
** COMMENT lsp-bridge
#+begin_src emacs-lisp
  (use-package lsp-bridge
    :ensure t)
#+end_src
** COMMENT realgud
#+begin_src emacs-lisp
  (use-package realgud
    :ensure t)
#+end_src
** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+end_src
** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+end_src
** TODO sed script
** Emacs Lisp
#+begin_src emacs-lisp
  (defun my-elisp-hook ()
    (company-mode)
    )
  (add-hook 'elisp-mode-hook #'my-elisp-hook)
#+end_src
** TODO Python
*** Project navigation
rg, projectile, treemacs (something else?)
*** Linting
ruff | ruff-lsp | lsp-bridge
*** Completition
jedi | jedi-lsp | lsp-bridge
*** Debugging
ipdb | realgud
*** Snippets
yasnippet
*** Documentation
jedi | jedi-lsp | lsp-bridge
*** Profiling
py-prof
*** Environment managment
venv, pyenv, pipenv
*** Dependensies
pipenv, some python lsp server (pylsp)
*** eLisp code
TODO install needed system packages
#+begin_src emacs-lisp
  (defun my-new-python-hook ()
    ;; (require 'lsp-bridge)
    ;; (require 'realgud)
    ;; (require 'projectile)

    (company-mode)
    (eglot-ensure)

    )

  (defun my-python-hook ()
    (let* ((virtualenv-dir-buffer-name (generate-new-buffer-name "virtualenv-dir"))
	   (saved-current-buffer-name (current-buffer))
	   (pipenv-ret-code (call-process "pipenv" nil virtualenv-dir-buffer-name nil "--venv")))
      (unless (and (equal pipenv-ret-code "1") (looking-at-p "No virtualenv has been created for this project(.*) yet!"))
	(set-buffer virtualenv-dir-buffer-name)
	(let ((begin-first-line (progn (beginning-of-buffer) (point)))
	      (end-first-line (progn (end-of-line) (point))))
	  (setq-local lsp-pylsp-plugins-jedi-environment
		      (buffer-substring-no-properties begin-first-line end-first-line)
		      )
	  )
	(set-buffer saved-current-buffer-name)
	)
      (kill-buffer virtualenv-dir-buffer-name)
      )

    (company-mode)
    (flycheck-mode)
    (lsp-deferred)
    )

  (add-hook 'python-mode-hook
	    #'my-new-python-hook
	    )
#+end_src
** TODO Robot Framework
#+begin_src emacs-lisp
  (use-package robot-mode
    :ensure t)
#+end_src
** TODO Rust
TODO install rust packages
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t)
  (defun my-rust-hook ()
    ;; (setq lsp-rust-server rust-analyzer)
    ;; (lsp)
    (company-mode)
    (eglot-ensure)
    )

  (add-hook 'rust-mode-hook
	    #'my-rust-hook
	    )

  ;; TODO Cargo.toml mode
#+end_src
** Setup startup hook
*** TODO Start terminal
#+begin_src emacs-lisp
  ;; TODO Сделать так, чтобы стартовало только при обычном запуске, а при запуске от гита и открытии файла открывался соответствующий буфер
  (defun my-startup-hook ()
    (term "/bin/bash")
    (rename-buffer "bash-shell")
    )
  (add-hook 'emacs-startup-hook
	    #'my-startup-hook)
#+end_src
