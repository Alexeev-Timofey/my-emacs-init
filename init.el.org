* ToDo list
** First Start
** Function and variables
** Python and RobotFramework
** Tools for search and project managment
** DONE Features list
** Auto install dependencies
** Tolls for VCS managment
** Natural Language Spelling
** Other languages
** Modify startup terminal launch
* Variables
** Debug
#+begin_src emacs-lisp
  (setq debug-on-error t)
#+end_src
* Functions
** COMMENT Convert nil value to empty string
#+begin_src emacs-lisp
  (defun string-nil-guard (input-string)
    "If value is nil, return \"\", else return argument \"input-string\""
    (if (eval input-string)
	(eval input-string)
      (eval ""))
    )
#+end_src
* Install and setup el-get
** TODO Install requred system packages
*** TODO Install function
*** TODO make TODO выяснить для какого пакета надо
** Setup MELPA repository
#+begin_src emacs-lisp
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+end_src
** COMMENT Setup load path
#+begin_src emacs-lisp
  (defvar el-get-root)
  (set 'el-get-root (concat (file-name-as-directory user-emacs-directory) "el-get"))
  (add-to-list 'load-path (concat (file-name-as-directory el-get-root) "el-get"))
  (add-to-list 'load-path (file-name-as-directory el-get-root))
#+end_src
** TODO Setup el-get reinstall hook (update elpa/melpa recipes)
** Install el-get if needed
#+begin_src emacs-lisp
  (unless (require 'el-get nil t)
    (url-retrieve
     "https://raw.github.com/dimitri/el-get/master/el-get-install.el"
     (lambda (s)
       (end-of-buffer)
       (eval-print-last-sexp))))
  ;; TODO Need restart?
#+end_src
** COMMENT Setup recipes path
#+begin_src emacs-lisp
  (defvar my-recipe-path)
  (setq my-recipe-path
	(file-name-as-directory (concat (file-name-as-directory user-emacs-directory)
					"el-get-user/recipes")))
  (add-to-list 'el-get-recipe-path my-recipe-path)
#+end_src
* Features
** Misk
*** Disable startup screen
   #+begin_src emacs-lisp
     (set 'inhibit-startup-screen 1)
   #+end_src
*** Disable useless bars
   #+begin_src emacs-lisp
     (scroll-bar-mode -1)
     (menu-bar-mode -1)
     (tool-bar-mode -1)
   #+end_src
*** Setup time display
   #+begin_src emacs-lisp
     (set 'display-time-day-and-date t)
     (set 'display-time-24hr-format t)
     (set 'display-time-load-average-threshold 0.5)
     (display-time)
   #+end_src
*** Disable extra files creation
   #+begin_src emacs-lisp
     (set 'auto-save-default nil)
     (set 'create-lockfiles nil)
     (set 'make-backup-files nil)
   #+end_src
*** Disable sound
   #+begin_src emacs-lisp
     (set 'ring-bell-function 'ignore)
   #+end_src
** Info mode
*** Setup info directorys
#+begin_src emacs-lisp
  ;; Add additional directories to INFOPATH environment variables
  (let ((info-dir-list (seq-filter 'eval (parse-colon-path (getenv "INFOPATH")))))
    (add-to-list 'info-dir-list (file-name-concat el-get-dir "el-get"))
    ;; Когда нибудь haskell-mode
    (add-to-list 'info-dir-list "" t)
    (setenv "INFOPATH" (mapconcat 'eval info-dir-list path-separator))
    )
#+end_src
** Dired
#+begin_src emacs-lisp
  (set 'dired-listing-switches "-lah")
#+end_src
** Ediff
#+begin_src emacs-lisp
  (set 'ediff-split-window-function 'split-window-horizontally)
#+end_src
** Color Theme
*** cyberpunk-theme
#+begin_src emacs-lisp
  (el-get-bundle cyberpunk-theme
    (add-to-list 'custom-theme-load-path (concat (file-name-as-directory el-get-root) "cyberpunk-theme"))
    (set 'custom-safe-themes t)
    (load-theme 'cyberpunk)
    )
#+end_src
** Helm
#+begin_src emacs-lisp
  (el-get-bundle helm
    (delq 'execute-extended-command 'helm-completing-read-handlers-alist)
    (delq 'find-file 'helm-completing-read-handlers-alist)

    (global-unset-key (kbd C-x c C-x C-f))
    (global-unset-key (kbd C-x c M-x))
    )
#+end_src
** TODO Helm search
** Company
#+begin_src emacs-lisp
  (el-get-bundle company-mode)
#+end_src
** Flycheck
#+begin_src emacs-lisp
  (el-get-bundle flycheck)
#+end_src
** TODO Projectile
** TODO Treemacs
** TODO Git
** TODO Natural Language Spelling
** LSP
#+begin_src emacs-lisp
  (el-get-bundle lsp-mode)
#+end_src
** YAML
#+begin_src emacs-lisp
  (el-get-bundle yamp-mode)
#+end_src
** TODO Markdown
** TODO Emacs Lisp
** TODO Python
TODO install needed system packages
#+begin_src emacs-lisp
  (defun my-python-hook ()
    (let* ((virtualenv-dir-buffer-name (generate-new-buffer-name "virtualenv-dir"))
	   (saved-current-buffer-name (current-buffer))
	   (pipenv-ret-code (call-process "pipenv" nil virtualenv-dir-buffer-name nil "--venv")))
      (unless (and (equal pipenv-ret-code "1") (looking-at-p "No virtualenv has been created for this project(.*) yet!"))
	(set-buffer virtualenv-dir-buffer-name)
	(let ((begin-first-line (progn (beginning-of-buffer) (point)))
	      (end-first-line (progn (end-of-line) (point))))
	  (setq-local lsp-pylsp-plugins-jedi-environment
		      (buffer-substring-no-properties begin-first-line end-first-line)
		      )
	  )
	(set-buffer saved-current-buffer-name)
	)
      (kill-buffer virtualenv-dir-buffer-name)
      )

    (company-mode)
    (flycheck-mode)
    (lsp-deferred)
    )

  (add-hook 'python-mode-hook
	    #'my-python-hook
	    )
#+end_src
** TODO Robot Framework
** TODO Rust
** Setup startup hook
*** TODO Start terminal
#+begin_src emacs-lisp
  ;; TODO Сделать так, чтобы стартовало только при обычном запуске, а при запуске от гита и открытии файла открывался соответствующий буфер
  (defun my-startup-hook ()
    (term "/bin/bash")
    (rename-buffer "bash-shell")
    )
  (add-hook 'emacs-startup-hook
	    #'my-startup-hook)
#+end_src
* el-get sync
#+begin_src emacs-lisp
  (el-get 'sync)
#+end_src
